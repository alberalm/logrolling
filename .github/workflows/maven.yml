# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    paths:
      - 'Server/**'
      - '.github/**'
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      working-directory: ./Server
      run: |
        mvn clean compile 
        mvn package     
    - name: Deploy release
      uses: WebFreak001/deploy-nightly@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
      with:
        upload_url: https://uploads.github.com/repos/palmenros/logrolling/releases/24453966/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
        release_id: 24453966 # same as above (id can just be taken out the upload_url, it's used to find old releases)
        asset_path: ./Server/target/tomcat-embedded-example-1.0-SNAPSHOT.jar # path to archive to upload
        asset_name: logrolling_server-CI-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: application/zip # required by GitHub API
        max_releases: 5 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted
